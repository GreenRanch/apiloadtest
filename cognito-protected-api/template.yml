AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: HTTP API
Globals:
  Function:
    Timeout: 5
    Handler: app.lambdaHandler
    Runtime: nodejs12.x
Resources:
  CognitoAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action:
          - sts:AssumeRoleWithWebIdentity
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-congnito-access-role
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource:
              Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}*
  CognitoUnAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action:
          - sts:AssumeRoleWithWebIdentity
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${AWS::StackName}
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}-app
      GenerateSecret: false
      WriteAttributes:
      - address
      - email
      - phone_number
      RefreshTokenValidity: 1
      UserPoolId:
        Ref: CognitoUserPool
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName:
        Fn::Sub: ${AWS::StackName}
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
      - ClientId:
          Ref: CognitoUserPoolClient
        ProviderName:
          Fn::GetAtt:
          - CognitoUserPool
          - ProviderName
  CognitoAttachRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        unauthenticated:
          Fn::GetAtt:
          - CognitoUnAuthorizedRole
          - Arn
        authenticated:
          Fn::GetAtt:
          - CognitoAuthorizedRole
          - Arn
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          GeneralAuth:
            AuthorizationScopes:
            - email
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
              audience:
              - Ref: CognitoUserPoolClient
      CorsConfiguration:
        AllowMethods:
        - GET
        AllowOrigins:
        - '*'
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'     
  AccessLogs:
    Type: AWS::Logs::LogGroup
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /
            Method: get
            ApiId:
              Ref: HttpApi
  SimpleAuthLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
            Path: /simple
            Method: get
            ApiId:
              Ref: HttpApi
  AdminLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda
      Events:
        DosGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
              - Fn::Sub: Admins-${CognitoUserPoolClient}
            Path: /admin
            Method: get
            ApiId:
              Ref: HttpApi
Outputs:
  ApiEndpoint:
    Description: HTTP API endpoint URL
    Value:
      Fn::Sub: https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com